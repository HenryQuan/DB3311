#!/usr/bin/php
<?php

// include the common PHP code file
require("a2.php");

$usage = "Usage: $argv[0] Name Num1 Num2";
// Init connection with database
$db = dbConnect(DB_CONNECTION);

// Check arguments
if (count($argv) < 3) exit("$usage\n");

$name = $argv[1];
$num1 = $argv[2];
$num2 = $argv[3];

$q = "-- Create a table with all connections
create or replace view Connection(A1, A2, ID) as
select distinct F.actor_id, S.actor_id, F.movie_id from Acting as F, Acting as S
where F.movie_id = S.movie_id and F.actor_id != S.actor_id;

-- find all connections recursively
with recursive Tree(A1, A2, ID, Degree) as (
  select A1, A2, ID, 1 as Degree from Connection where A1 = (select id from Actor where lower(name) = lower('$name'))
union all
  select distinct T.A2, C.A2, C.ID, T.Degree + 1 from Tree as T, Connection as C
  where C.A1 = T.A2 and C.ID != T.ID and C.A2 != T.A1 and C.A2 != T.A2 and T.Degree < $num2
)

select distinct A.name, S.Degree from Tree as T
join Actor as A
on A.id = T.A2
join Tree as S
on T.A2 = S.A2
-- format nicely
--select A.name, T.Degree from Tree as T, (select distinct A2 from Tree) as F, Actor as A
--where F.A2 = A.id and T.A2 = F.A2 order by A.name";

$r = dbQuery($db, mkSQL($q));

$i = 1;
while ($t = dbNext($r)) {
  //if ($t[1] >= $num1 && $t[1] <= $num2) {
    echo "$i. $t[0] ($t[1])\n";
    $i++;
  //}
}

/*

Join two tables (this is a right dictional)

create or replace view Connection(A1, A2) as
select distinct F.actor_id, S.actor_id from Acting as F, Acting as S
where F.movie_id = S.movie_id and F.actor_id != S.actor_id;

Oh my god this is too slow

$q = "with recursive Tree(Actor, Degree) as (
    select (select id from Actor where lower(name) = lower('$name')) as Actor, 0 as Degree -- pass in starting actor id and 0 as the default degree
union all
    select distinct A.actor_id, (T.Degree + 1) as Degree from Acting as A, Tree as T
    where A.actor_id not in (Actor)
    and A.movie_id in (select distinct movie_id from Acting where actor_id in (Actor))
    and T.Degree < $num2
)
select A.name, T.Degree from Tree as T, Actor as A
where T.Actor = A.id order by A.name";
*/

?>
